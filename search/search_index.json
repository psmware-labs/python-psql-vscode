{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Python3 and PostgreSQL Template Development Environment Introduction Developing with Python and PostgreSQL in Visual Studio Code Docker Developer Environment Configuration The project is designed so that no changes to an OS environment are required, and that the all of packages used are installed locally to the project Docker Container. The project currently uses poetry when possible to install packages in the docker container.","title":"A Python3 and PostgreSQL Template Development Environment"},{"location":"#a-python3-and-postgresql-template-development-environment","text":"","title":"A Python3 and PostgreSQL Template Development Environment"},{"location":"#introduction","text":"Developing with Python and PostgreSQL in Visual Studio Code","title":"Introduction"},{"location":"#docker-developer-environment-configuration","text":"The project is designed so that no changes to an OS environment are required, and that the all of packages used are installed locally to the project Docker Container. The project currently uses poetry when possible to install packages in the docker container.","title":"Docker Developer Environment Configuration"},{"location":"cloning-the-repo/","text":"In this example, we will be working with the pmclean/seal project. On GitHub, navigate to the main page of the repository in our example it would be the https://github.com/patmclean/seal repository. Under the repository name, click green Code . To clone the repository, click Use SSH, then click . Open Terminal. In this example, we will create a python filesystem in ~/dev/python/ as this is a python template, and change the current working directory to the location where we want the cloned project reside. user@host ~$ mkdir -p ~/dev/python user@host ~$ cd ~/dev/python user@host ~/dev/python$ git clone git@github.com:patmclean/seal.git Cloning into 'seal'... remote: Enumerating objects: 20, done. remote: Counting objects: 100% (20/20), done. remote: Compressing objects: 100% (18/18), done. remote: Total 20 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (20/20), 6.04 KiB | 3.02 MiB/s, done. Change into the new file system, and validate connectivity back to the seal GitHub repository. user@host ~/dev/python$ cd seal user@host ~/dev/python/seal$ git remote -v origin git@github.com:patmclean/seal.git (fetch) origin git@github.com:patmclean/seal.git (push) user@host ~/dev/python/seal$ The repository has been cloned and can now see the GitHub Repo as a remote origin . Steps 4, 5, and 6 can be repeated on any computer that has been configured to work with GitHub.","title":"Cloning the Repository"},{"location":"docker-dekstop/","text":"Installing Docker Desktop Go to the Docker for Windows Download page and Click the Get Docker button Double-click the downloaded Docker Desktop Installer.exe to run the installer. Follow the instructions on the installation wizard to authorize the installer and proceed with the install. When the installation is successful, click Close to complete the installation process. If your admin account is different to your user account, you must add the user to the docker-users group. Run Computer Management as an administrator and navigate to Local Users and Groups > Groups > docker-users . Right-click to add the user to the group. Log out and log back in for the changes to take effect.","title":"Docker Desktop"},{"location":"docker-dekstop/#installing-docker-desktop","text":"Go to the Docker for Windows Download page and Click the Get Docker button Double-click the downloaded Docker Desktop Installer.exe to run the installer. Follow the instructions on the installation wizard to authorize the installer and proceed with the install. When the installation is successful, click Close to complete the installation process. If your admin account is different to your user account, you must add the user to the docker-users group. Run Computer Management as an administrator and navigate to Local Users and Groups > Groups > docker-users . Right-click to add the user to the group. Log out and log back in for the changes to take effect.","title":"Installing Docker Desktop"},{"location":"first-run/","text":"As you are using the template for your new repository, you must make some changes to some donfig files to ensure that your many projects do not clash in docker. Running the configuration script In your project folder, before openin the project in Visual Studio Code, execute the following command to configure the rename all template variables to your new project name. In our example we will use the patmclean/seal project. In your Ubuntu Terminal, run: user@host ~/dev/python/seal$ python3 .devcontainer/configureProject.py You will be presented with a shell prompt as follows: Please enter the name of the GitHub Repository for this application (excluding your github id): As our repo name is patmclean/seal we will enter seal as the repository name. Please enter the name of the GitHub Repository for this application (excluding your github id): seal You will be presented with next question, as our repo description is SAP Environment and Locations , we will enter that here : Please enter the brief description that was the GitHub Repository to the nature of the application: SAP Environment and Locations The configuration script will now display the following: This script will now configure the cloned template for your application: App-Name: seal Description: SAP Environment and Locations Would you like to proceed with the setup using the provided info? Yes/Y or No/N: From this point, as I am happy with my entries, I will type Y / yes to continue. Verifying that the setup has completed The configuration script modifies five files. We can verify that the script has been successful by checking the repository status, with git status . user@host ~/dev/python/seal$ git status On branch master Your branch is up to date with 'origin/master'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .devcontainer/devcontainer.json modified: .devcontainer/docker-compose.yml modified: README.md no changes added to commit (use \"git add\" and/or \"git commit -a\") user@host ~/dev/python/seal$ All seems well, time to update GitHub with our newly configured start point. updating Github To update GitHub run the following. user@host ~/dev/python/seal$ git add . && git status On branch master Your branch is up to date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) modified: .devcontainer/devcontainer.json modified: .devcontainer/docker-compose.yml modified: README.md user@host ~/dev/python/seal$ git commit -m 'Refactor: Configure Template to Project' [master 55a708d] Refactor: Configure Template to Project 5 files changed, 12 insertions(+), 15 deletions(-) rewrite README.md (99%) user@host ~/dev/python/seal$ git push --set-upstream origin master Enumerating objects: 14, done. Counting objects: 100% (14/14), done. Delta compression using up to 16 threads Compressing objects: 100% (8/8), done. Writing objects: 100% (8/8), 1.19 KiB | 1.19 MiB/s, done. Total 8 (delta 4), reused 0 (delta 0) remote: Resolving deltas: 100% (4/4), completed with 4 local objects. To github.com:patmclean/seal.git c0302e8..55a708d master -> master Branch 'master' set up to track remote branch 'master' from 'origin'. GitHub is now up to date, and the project is now ready to load up and run in Visual Studio Code. You are now ready to start Using the new repository in Visual Studio Code.","title":"Configuring project for 1st run"},{"location":"first-run/#running-the-configuration-script","text":"In your project folder, before openin the project in Visual Studio Code, execute the following command to configure the rename all template variables to your new project name. In our example we will use the patmclean/seal project. In your Ubuntu Terminal, run: user@host ~/dev/python/seal$ python3 .devcontainer/configureProject.py You will be presented with a shell prompt as follows: Please enter the name of the GitHub Repository for this application (excluding your github id): As our repo name is patmclean/seal we will enter seal as the repository name. Please enter the name of the GitHub Repository for this application (excluding your github id): seal You will be presented with next question, as our repo description is SAP Environment and Locations , we will enter that here : Please enter the brief description that was the GitHub Repository to the nature of the application: SAP Environment and Locations The configuration script will now display the following: This script will now configure the cloned template for your application: App-Name: seal Description: SAP Environment and Locations Would you like to proceed with the setup using the provided info? Yes/Y or No/N: From this point, as I am happy with my entries, I will type Y / yes to continue.","title":"Running the configuration script"},{"location":"first-run/#verifying-that-the-setup-has-completed","text":"The configuration script modifies five files. We can verify that the script has been successful by checking the repository status, with git status . user@host ~/dev/python/seal$ git status On branch master Your branch is up to date with 'origin/master'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .devcontainer/devcontainer.json modified: .devcontainer/docker-compose.yml modified: README.md no changes added to commit (use \"git add\" and/or \"git commit -a\") user@host ~/dev/python/seal$ All seems well, time to update GitHub with our newly configured start point.","title":"Verifying that the setup has completed"},{"location":"first-run/#updating-github","text":"To update GitHub run the following. user@host ~/dev/python/seal$ git add . && git status On branch master Your branch is up to date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) modified: .devcontainer/devcontainer.json modified: .devcontainer/docker-compose.yml modified: README.md user@host ~/dev/python/seal$ git commit -m 'Refactor: Configure Template to Project' [master 55a708d] Refactor: Configure Template to Project 5 files changed, 12 insertions(+), 15 deletions(-) rewrite README.md (99%) user@host ~/dev/python/seal$ git push --set-upstream origin master Enumerating objects: 14, done. Counting objects: 100% (14/14), done. Delta compression using up to 16 threads Compressing objects: 100% (8/8), done. Writing objects: 100% (8/8), 1.19 KiB | 1.19 MiB/s, done. Total 8 (delta 4), reused 0 (delta 0) remote: Resolving deltas: 100% (4/4), completed with 4 local objects. To github.com:patmclean/seal.git c0302e8..55a708d master -> master Branch 'master' set up to track remote branch 'master' from 'origin'. GitHub is now up to date, and the project is now ready to load up and run in Visual Studio Code. You are now ready to start Using the new repository in Visual Studio Code.","title":"updating Github"},{"location":"gpg-and-git/","text":"Configuring git to use your GPG key and credentials Open a new Ubuntu 20.04 Terminal Window, paste the command beginning with gpg below to list your gpg key, which will be used to sign your commits. devops@devops-pc:~$ gpg --list-secret-keys --keyid-format LONG /home/devops/.gnupg/pubring.kbx ------------------------------- sec rsa4096/A9E3031D40E7A31F 2020-07-03 [SC] 71859D719307C206B6936735A9E3031D40E7A31F uid [ultimate] Lab Developer (enter comment here) lab-dev@domain.com ssb rsa4096/B8239EB7C4286DAB 2020-07-03 [E] devops@devops-pc:~$ We will be using the key displayed to configure git, here using the example key above A9E3031D40E7A31F taken from the 4th line sec rsa4096/A9E3031D40E7A31F 2020-07-03 [SC] Enter the following commands, substituting your name , email address , and gpg signingkey. devops@devops-pc:~$ git config --global gpg.program gpg devops@devops-pc:~$ git config --global commit.gpgsign true devops@devops-pc:~$ git config --global user.signingkey A9E3031D40E7A31F devops@devops-pc:~$ git config --global user.name \"Lab Developer\" devops@devops-pc:~$ git config --global user.email lab-dev@domain.com devops@devops-pc:~$ Now verify that the config is correct, by typing cat ~/.gitconfig: You should see something similar to below, but with your credentials. devops@devops-pc:~$ cat ~/.gitconfig [gpg] program = gpg [commit] gpgsign = true [user] signingkey = A9E3031D40E7A31F name = Lab Developer email = lab-dev@domain.com devops@devops-pc:~$","title":"Git on Ubuntu"},{"location":"gpg-and-git/#configuring-git-to-use-your-gpg-key-and-credentials","text":"Open a new Ubuntu 20.04 Terminal Window, paste the command beginning with gpg below to list your gpg key, which will be used to sign your commits. devops@devops-pc:~$ gpg --list-secret-keys --keyid-format LONG /home/devops/.gnupg/pubring.kbx ------------------------------- sec rsa4096/A9E3031D40E7A31F 2020-07-03 [SC] 71859D719307C206B6936735A9E3031D40E7A31F uid [ultimate] Lab Developer (enter comment here) lab-dev@domain.com ssb rsa4096/B8239EB7C4286DAB 2020-07-03 [E] devops@devops-pc:~$ We will be using the key displayed to configure git, here using the example key above A9E3031D40E7A31F taken from the 4th line sec rsa4096/A9E3031D40E7A31F 2020-07-03 [SC] Enter the following commands, substituting your name , email address , and gpg signingkey. devops@devops-pc:~$ git config --global gpg.program gpg devops@devops-pc:~$ git config --global commit.gpgsign true devops@devops-pc:~$ git config --global user.signingkey A9E3031D40E7A31F devops@devops-pc:~$ git config --global user.name \"Lab Developer\" devops@devops-pc:~$ git config --global user.email lab-dev@domain.com devops@devops-pc:~$ Now verify that the config is correct, by typing cat ~/.gitconfig: You should see something similar to below, but with your credentials. devops@devops-pc:~$ cat ~/.gitconfig [gpg] program = gpg [commit] gpgsign = true [user] signingkey = A9E3031D40E7A31F name = Lab Developer email = lab-dev@domain.com devops@devops-pc:~$","title":"Configuring git to use your GPG key and credentials"},{"location":"gpg-on-ubuntu/","text":"Installing GPG Using GPG, you sign tags and commits locally. These tags or commits are marked as verified on GitHub so other people in the Team can trust that the changes come from a trusted source. I suggest commit signing for all code. Installation Steps Open a Ubuntu Terminal. In the terminal run the following. devops@devops-pc:~$ gpg --full-generate-key gpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (14) Existing key from card Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (3072) 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire <n> = key expires in n days <n>w = key expires in n weeks <n>m = key expires in n months <n>y = key expires in n years Key is valid for? (0) 0 Key does not expire at all If you have made no mistakes, Type Y, press Enter/Return, otherwise type N to restart the process. Is this correct? (y/N) y Now, proceed with setting up your credentials for signing. In this example, I am using Lab Developer and lab-dev@domain.com , for demonstration purposes. Use your own name and email. GnuPG needs to construct a user ID to identify your key. Real name: Lab Developer Email address: lab-dev@domain.com Comment: enter comment here You selected this USER-ID: \"Lab Developer (enter comment here) <lab-dev@domain.com>\" Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? If you have made no mistakes, Type O , press Enter/Return, otherwise type N , E , or C to fix the appropriate part of the key, then press O to continue. After a while, the password dialog box shown will appear, enter a good passphrase twice to protect your key, then click OK to continue. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Please enter a passphrase \u2502 \u2502 Passphrase: ***********____________________________ \u2502 \u2502 <OK> <Cancel> \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 And to confirm \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Please re-enter this passphrase \u2502 \u2502 Passphrase: ***********____________________________ \u2502 \u2502 <OK> <Cancel> \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilise the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: /home/devops/.gnupg/trustdb.gpg: trustdb created gpg: key A9E3031D40E7A31F marked as ultimately trusted gpg: directory '/home/devops/.gnupg/openpgp-revocs.d' created gpg: revocation certificate stored as '/home/devops/.gnupg/openpgp-revocs.d/71859D719307C206B6936735A9E3031D40E7A31F.rev' public and secret key created and signed. pub rsa4096 2020-07-03 [SC] 71859D719307C206B6936735A9E3031D40E7A31F uid Lab Developer (enter comment here) lab-dev@domain.com sub rsa4096 2020-07-03 [E] devops@devops-pc:~$ The detail of your pubring.kbx should show your newly created key. List your key details as follows. devops@devops-pc:~$ gpg --list-secret-keys --keyid-format LONG /home/devops/.gnupg/pubring.kbx ------------------------------- sec rsa4096/A9E3031D40E7A31F 2020-07-03 [SC] 71859D719307C206B6936735A9E3031D40E7A31F uid [ultimate] Lab Developer (enter comment here) lab-dev@domain.com ssb rsa4096/B8239EB7C4286DAB 2020-07-03 [E] devops@devops-pc:~$ The last thing to do is ensure that GPG knows where to execute its signing process. To configure this, run the following in your Ubuntu terminal: devops@devops-pc:~$ echo \"export GPG_TTY=$(tty)\" >> ~/.bashrc devops@devops-pc:~$ source ~/.bashrc devops@devops-pc:~$ env | grep GPG GPG_TTY=/dev/pts/0 devops@devops-pc:~$ GPG is now installed and configured. Adding your GPG Public Key to Github In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Click New GPG key . In the same terminal that you had open for the creation of your GPG key, again, type the following to list your gpg keys. Again for demonstration purposes I am using Lab Developer's here. devops@devops-pc:~$ gpg --list-secret-keys --keyid-format LONG /home/devops/.gnupg/pubring.kbx ------------------------------- sec rsa4096/A9E3031D40E7A31F 2020-07-03 [SC] 71859D719307C206B6936735A9E3031D40E7A31F uid [ultimate] Lab Developer (enter comment here) lab-dev@domain.com ssb rsa4096/B8239EB7C4286DAB 2020-07-03 [E] devops@devops-pc:~$ From the list of GPG keys, copy the GPG key ID that corresponds to your credentials. In this example, the GPG key ID is A9E3031D40E7A31F from the line beginning with sec above. Now we export the public key associated with your credential, by running the following. In the example here we are using the key listed above. This exports the key in ASCII format to allow for copying to GitHub. devops@devops-pc:~$ gpg --armor --export A9E3031D40E7A31F -----BEGIN PGP PUBLIC KEY BLOCK----- # Copy this line as well\u2022 mQINBF3/pfYBEADBtsYohFlwuKqFcuekU3CybI3dAY4K/kFfQQHOiSRc/n4KAXc3 WdA3NscYfLjYURfGpS2A91dV5XUkyN7J70w2q7SII4TXndpsEfXBEq0/Iv8Qj6Al hXofy4XRR2KZBRZdbxqHBrmrxpRVR6meBYOpOVxptxkq64i4nyJVLVRDMXm7isA9 RNIcRBzO5ycuSrNvsh9ZyruLWEIHcWR9maYd6nRjjhTjV8VMbwqay1KmNPQbJbxF \u2022<!-- snipped text for convenience --> \u2022LOu4rLotu1Z8MYqp4ZY89vur1E81vDMULB0I8ejYgwKBbLDqVfWgpy+z5rHTEwoK 8aJ9iLRuVPt0R97akNSyOdbSYjsU36I06KijB+uLBi4mKQ5q4Y08eIfSDSas5YlD +OLY6oPTvc3WL8U==GdYQ -----END PGP PUBLIC KEY BLOCK----- # Copy this line as well Select your key including the BEGIN/END lines, as indicated above, and paste the text into the Key field in GitHub Click the green Add GPG Key button. When prompted, confirm your GitHub password. Your GPG Key has now been added and is ready for use with GitHub.","title":"GPG on Ubuntu/GitHub"},{"location":"gpg-on-ubuntu/#installing-gpg","text":"Using GPG, you sign tags and commits locally. These tags or commits are marked as verified on GitHub so other people in the Team can trust that the changes come from a trusted source. I suggest commit signing for all code.","title":"Installing GPG"},{"location":"gpg-on-ubuntu/#installation-steps","text":"Open a Ubuntu Terminal. In the terminal run the following. devops@devops-pc:~$ gpg --full-generate-key gpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (14) Existing key from card Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (3072) 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire <n> = key expires in n days <n>w = key expires in n weeks <n>m = key expires in n months <n>y = key expires in n years Key is valid for? (0) 0 Key does not expire at all If you have made no mistakes, Type Y, press Enter/Return, otherwise type N to restart the process. Is this correct? (y/N) y Now, proceed with setting up your credentials for signing. In this example, I am using Lab Developer and lab-dev@domain.com , for demonstration purposes. Use your own name and email. GnuPG needs to construct a user ID to identify your key. Real name: Lab Developer Email address: lab-dev@domain.com Comment: enter comment here You selected this USER-ID: \"Lab Developer (enter comment here) <lab-dev@domain.com>\" Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? If you have made no mistakes, Type O , press Enter/Return, otherwise type N , E , or C to fix the appropriate part of the key, then press O to continue. After a while, the password dialog box shown will appear, enter a good passphrase twice to protect your key, then click OK to continue. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Please enter a passphrase \u2502 \u2502 Passphrase: ***********____________________________ \u2502 \u2502 <OK> <Cancel> \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 And to confirm \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Please re-enter this passphrase \u2502 \u2502 Passphrase: ***********____________________________ \u2502 \u2502 <OK> <Cancel> \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilise the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: /home/devops/.gnupg/trustdb.gpg: trustdb created gpg: key A9E3031D40E7A31F marked as ultimately trusted gpg: directory '/home/devops/.gnupg/openpgp-revocs.d' created gpg: revocation certificate stored as '/home/devops/.gnupg/openpgp-revocs.d/71859D719307C206B6936735A9E3031D40E7A31F.rev' public and secret key created and signed. pub rsa4096 2020-07-03 [SC] 71859D719307C206B6936735A9E3031D40E7A31F uid Lab Developer (enter comment here) lab-dev@domain.com sub rsa4096 2020-07-03 [E] devops@devops-pc:~$ The detail of your pubring.kbx should show your newly created key. List your key details as follows. devops@devops-pc:~$ gpg --list-secret-keys --keyid-format LONG /home/devops/.gnupg/pubring.kbx ------------------------------- sec rsa4096/A9E3031D40E7A31F 2020-07-03 [SC] 71859D719307C206B6936735A9E3031D40E7A31F uid [ultimate] Lab Developer (enter comment here) lab-dev@domain.com ssb rsa4096/B8239EB7C4286DAB 2020-07-03 [E] devops@devops-pc:~$ The last thing to do is ensure that GPG knows where to execute its signing process. To configure this, run the following in your Ubuntu terminal: devops@devops-pc:~$ echo \"export GPG_TTY=$(tty)\" >> ~/.bashrc devops@devops-pc:~$ source ~/.bashrc devops@devops-pc:~$ env | grep GPG GPG_TTY=/dev/pts/0 devops@devops-pc:~$ GPG is now installed and configured.","title":"Installation Steps"},{"location":"gpg-on-ubuntu/#adding-your-gpg-public-key-to-github","text":"In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Click New GPG key . In the same terminal that you had open for the creation of your GPG key, again, type the following to list your gpg keys. Again for demonstration purposes I am using Lab Developer's here. devops@devops-pc:~$ gpg --list-secret-keys --keyid-format LONG /home/devops/.gnupg/pubring.kbx ------------------------------- sec rsa4096/A9E3031D40E7A31F 2020-07-03 [SC] 71859D719307C206B6936735A9E3031D40E7A31F uid [ultimate] Lab Developer (enter comment here) lab-dev@domain.com ssb rsa4096/B8239EB7C4286DAB 2020-07-03 [E] devops@devops-pc:~$ From the list of GPG keys, copy the GPG key ID that corresponds to your credentials. In this example, the GPG key ID is A9E3031D40E7A31F from the line beginning with sec above. Now we export the public key associated with your credential, by running the following. In the example here we are using the key listed above. This exports the key in ASCII format to allow for copying to GitHub. devops@devops-pc:~$ gpg --armor --export A9E3031D40E7A31F -----BEGIN PGP PUBLIC KEY BLOCK----- # Copy this line as well\u2022 mQINBF3/pfYBEADBtsYohFlwuKqFcuekU3CybI3dAY4K/kFfQQHOiSRc/n4KAXc3 WdA3NscYfLjYURfGpS2A91dV5XUkyN7J70w2q7SII4TXndpsEfXBEq0/Iv8Qj6Al hXofy4XRR2KZBRZdbxqHBrmrxpRVR6meBYOpOVxptxkq64i4nyJVLVRDMXm7isA9 RNIcRBzO5ycuSrNvsh9ZyruLWEIHcWR9maYd6nRjjhTjV8VMbwqay1KmNPQbJbxF \u2022<!-- snipped text for convenience --> \u2022LOu4rLotu1Z8MYqp4ZY89vur1E81vDMULB0I8ejYgwKBbLDqVfWgpy+z5rHTEwoK 8aJ9iLRuVPt0R97akNSyOdbSYjsU36I06KijB+uLBi4mKQ5q4Y08eIfSDSas5YlD +OLY6oPTvc3WL8U==GdYQ -----END PGP PUBLIC KEY BLOCK----- # Copy this line as well Select your key including the BEGIN/END lines, as indicated above, and paste the text into the Key field in GitHub Click the green Add GPG Key button. When prompted, confirm your GitHub password. Your GPG Key has now been added and is ready for use with GitHub.","title":"Adding your GPG Public Key to Github"},{"location":"prerequisites/","text":"Prerequisites Before downloading and installing the software, a couple of tasks must first be completed, to enable seamless integration with target production platforms, version control, and to allow for collaboration cross-platform projects within the DevOps team. System Requirements Windows 10 machines must meet the following requirements to install the DevOps Environment: Understanding which version you are using is not required, just ensure that you are running either: version 2004 for the consumer edition version 20H2 for the business edition Enable the WSL 2 feature on Windows, The following hardware prerequisites are required: 64 bit processor with Second Level Address Translation (SLAT) 8GB system RAM BIOS-level hardware virtualization support must be enabled in the BIOS settings. Download and install the Linux kernel update package. Checking your Windows Version Check your Windows version by selecting the Windows logo key + R , type winver, select OK . (Or enter the ver command in Windows Command Prompt) Consumer Edition Business Edition If your version is NOT 2004/20H2, please update to the latest Windows via Windows Update, as follows. Click the Windows Logo then settings: Then select Update & Security , and Windows Update . Apply any outstanding updates that you have rebooting when asked. Eventually you will open the Windows Update panel and see: If you have a consumer edition of Windows If you have the business edition of Windows Click, Download and install . The Windows Update page will change to something similar to below showing that Windows 10, Version 2004 is installing. Go take a nap at this point (the process to just over an hour and 40 minutes for me), as the update process will rotate thru several status changes, Getting things ready , Downloading , and Installing . Consumer Edition Business Edition After your nap, check and you will see that the update has completed, and that Your system can be rebooted. Press the Restart now button, and restart. Install the Windows Subsystem for Linux Now we need to enable the \"Windows Subsystem for Linux\" optional feature, which is used by Docker to host the containers used by VS Code. Open PowerShell as Administrator and run: PS C:\\WINDOWS\\system32\\> dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart Deployment Image Servicing and Management tool Version: 10.0.19041.329 Image Version: 10.0.19041.329 Enabling feature(s) [==========================100.0%==========================] The operation completed successfully. Update to WSL 2 Enable the 'Virtual Machine Platform' optional component Before installing WSL 2, you must enable the \"Virtual Machine Platform\" optional feature. Open PowerShell as Administrator and run: PS C:\\WINDOWS\\system32\\> dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Deployment Image Servicing and Management tool Version: 10.0.19041.329 Image Version: 10.0.19041.329 Enabling feature(s) [==========================100.0%==========================] The operation completed successfully. Restart your machine to complete the WSL install and update to WSL 2. PS C:\\WINDOWS\\system32\\> restart-computer Set WSL 2 as your default version Run the following command in PowerShell as Administrator to set WSL 2 as the default version: PS C:\\WINDOWS\\system32\\> wsl --set-default-version 2 You might see this message after running that command: WSL 2 requires an update to its kernel component Please click this link and run the downloaded MSI to install the Linux kernel on your machine for WSL 2 to use. Once you have the kernel installed, please run the following command again and it should complete successfully without showing the warning message about the kernel component. wsl --set-default-version 2","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"Before downloading and installing the software, a couple of tasks must first be completed, to enable seamless integration with target production platforms, version control, and to allow for collaboration cross-platform projects within the DevOps team.","title":"Prerequisites"},{"location":"prerequisites/#system-requirements","text":"Windows 10 machines must meet the following requirements to install the DevOps Environment: Understanding which version you are using is not required, just ensure that you are running either: version 2004 for the consumer edition version 20H2 for the business edition Enable the WSL 2 feature on Windows, The following hardware prerequisites are required: 64 bit processor with Second Level Address Translation (SLAT) 8GB system RAM BIOS-level hardware virtualization support must be enabled in the BIOS settings. Download and install the Linux kernel update package.","title":"System Requirements"},{"location":"prerequisites/#checking-your-windows-version","text":"Check your Windows version by selecting the Windows logo key + R , type winver, select OK . (Or enter the ver command in Windows Command Prompt) Consumer Edition Business Edition If your version is NOT 2004/20H2, please update to the latest Windows via Windows Update, as follows. Click the Windows Logo then settings: Then select Update & Security , and Windows Update . Apply any outstanding updates that you have rebooting when asked. Eventually you will open the Windows Update panel and see: If you have a consumer edition of Windows If you have the business edition of Windows Click, Download and install . The Windows Update page will change to something similar to below showing that Windows 10, Version 2004 is installing. Go take a nap at this point (the process to just over an hour and 40 minutes for me), as the update process will rotate thru several status changes, Getting things ready , Downloading , and Installing . Consumer Edition Business Edition After your nap, check and you will see that the update has completed, and that Your system can be rebooted. Press the Restart now button, and restart.","title":"Checking your Windows Version"},{"location":"prerequisites/#install-the-windows-subsystem-for-linux","text":"Now we need to enable the \"Windows Subsystem for Linux\" optional feature, which is used by Docker to host the containers used by VS Code. Open PowerShell as Administrator and run: PS C:\\WINDOWS\\system32\\> dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart Deployment Image Servicing and Management tool Version: 10.0.19041.329 Image Version: 10.0.19041.329 Enabling feature(s) [==========================100.0%==========================] The operation completed successfully.","title":"Install the Windows Subsystem for Linux"},{"location":"prerequisites/#update-to-wsl-2","text":"Enable the 'Virtual Machine Platform' optional component Before installing WSL 2, you must enable the \"Virtual Machine Platform\" optional feature. Open PowerShell as Administrator and run: PS C:\\WINDOWS\\system32\\> dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart Deployment Image Servicing and Management tool Version: 10.0.19041.329 Image Version: 10.0.19041.329 Enabling feature(s) [==========================100.0%==========================] The operation completed successfully. Restart your machine to complete the WSL install and update to WSL 2. PS C:\\WINDOWS\\system32\\> restart-computer","title":"Update to WSL 2"},{"location":"prerequisites/#set-wsl-2-as-your-default-version","text":"Run the following command in PowerShell as Administrator to set WSL 2 as the default version: PS C:\\WINDOWS\\system32\\> wsl --set-default-version 2 You might see this message after running that command: WSL 2 requires an update to its kernel component Please click this link and run the downloaded MSI to install the Linux kernel on your machine for WSL 2 to use. Once you have the kernel installed, please run the following command again and it should complete successfully without showing the warning message about the kernel component. wsl --set-default-version 2","title":"Set WSL 2 as your default version"},{"location":"ssh-on-ubuntu/","text":"Configure SSH to authenticate on Ubuntu Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username or password at each visit. This section will show you how to configure SSH on Linux, and add your Key to your GitHub Account. Click, Start and open a Ubuntu terminal window, and paste the text below, substituting in your Email Address. This creates a new ssh key, using the provided email as a label. When you're prompted to Enter a file in which to save the key, press Enter. This accepts the default file location. you@host:~ $ ssh-keygen -t rsa -b 4096 -C \"your_email@domain.com\" Enter a file in which to save the key (/home/you/.ssh/id_rsa): [Press enter] At the password prompt, press enter, or type a secure passphrase, if you use an ssh-agent. > Enter passphrase (empty for no passphrase): [Press enter] > Enter same passphrase again: [Press enter] Your identification has been saved in id-rsa. Your public key has been saved in id-rsa.pub. The key fingerprint is: SHA256:< A long string of what looks like gibberish > your_email@domain.com The key's randomart image is: +---[RSA 4096]----+ | . =*B +| A nice lil'graphic | . =*B +| +----[SHA256]-----+ you@host:~ $ Configuring GitHub to use SSH Log into GitHub. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Then Click New SSH key or Add SSH key . In the Title field, add a descriptive label for the new key. For example, if you're using the a Dell Laptop, you might call this key My Dell . To copy the SSH public key for addition to GitHub run the following on your OS In the Ubuntu Terminal on Windows, and at the prompt type the following: cat ~/.ssh/id_rsa.pub Copy the resultant output in its entirety, including email address. Do NOT add line-breaks manually. devops@devops-pc:~$ cat ~/.ssh/id\\_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCmwEDEM2rqfqoy25rNJzXfHYcHb1 wHSVUoWRfK6aYfQGYpWyRLBFE5t9DkJiMH5dV+dx6qkCAJhFFu+r2RMVJD gmkfjAw8I/2U+PPMApJ8RfH+lrVaz2fYkmEetgwWM0UNEJ5IPmMauZahPE ljlJoKyXTa25Z2KFEJVljd4jnFHr2iuyMgIql3Dt26jZkebgEytaWQTJ9Z W3NoPXqBd0+kYPyQc8NXj2gTwKwaEFgWAdIu3WPUM/utrtSHp12ePD6UgH H6siE9xXJUSCgZgZcAVAF2ZTd5y1fa07SvgM8tsV7JavDp62TLw+xpYQhr htWYpHkIGCaKQHZGKedYnRkjZB9/d0BYflpvLWnjtFanfj3g1RgnNBw2p8 zSl9PwLaQQNsVtGcg60D97TanZIzSD+yWPliZrrIAH8ncOExoGk8s85dWj pcvxyrKX52kbG5tk51niE/MgQxlRwse9BLFLVlc50BCHn1i27+TJuFHiO+ 16uXU1PyN88ZXAT2xgb2uIsxCb4CNBM0L6scwLRj+uLCHCghhdF6zoUvT1 8qtyZsvDu86e0x53ez8zCoX4K/6zYSZQOz+mkSa6DWqCIeeua0EQA/Cw1i gaCj5X7kKiytLpRT2C1rIb+NP1SEZTyuju+0v2H/kBJPjf6PJJXpByoTU6 gyZfbYLwJrLBAx8PqQ== your_email@domain.com Paste your key into the _ Key** field. Click Add SSH key . When prompted, confirm your GitHub password. Your SSH Key has now been added and is ready for use with GitHub","title":"SSH on Ubuntu/GitHub"},{"location":"ssh-on-ubuntu/#configure-ssh-to-authenticate-on-ubuntu","text":"Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username or password at each visit. This section will show you how to configure SSH on Linux, and add your Key to your GitHub Account. Click, Start and open a Ubuntu terminal window, and paste the text below, substituting in your Email Address. This creates a new ssh key, using the provided email as a label. When you're prompted to Enter a file in which to save the key, press Enter. This accepts the default file location. you@host:~ $ ssh-keygen -t rsa -b 4096 -C \"your_email@domain.com\" Enter a file in which to save the key (/home/you/.ssh/id_rsa): [Press enter] At the password prompt, press enter, or type a secure passphrase, if you use an ssh-agent. > Enter passphrase (empty for no passphrase): [Press enter] > Enter same passphrase again: [Press enter] Your identification has been saved in id-rsa. Your public key has been saved in id-rsa.pub. The key fingerprint is: SHA256:< A long string of what looks like gibberish > your_email@domain.com The key's randomart image is: +---[RSA 4096]----+ | . =*B +| A nice lil'graphic | . =*B +| +----[SHA256]-----+ you@host:~ $","title":"Configure SSH to authenticate on Ubuntu"},{"location":"ssh-on-ubuntu/#configuring-github-to-use-ssh","text":"Log into GitHub. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Then Click New SSH key or Add SSH key . In the Title field, add a descriptive label for the new key. For example, if you're using the a Dell Laptop, you might call this key My Dell . To copy the SSH public key for addition to GitHub run the following on your OS In the Ubuntu Terminal on Windows, and at the prompt type the following: cat ~/.ssh/id_rsa.pub Copy the resultant output in its entirety, including email address. Do NOT add line-breaks manually. devops@devops-pc:~$ cat ~/.ssh/id\\_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCmwEDEM2rqfqoy25rNJzXfHYcHb1 wHSVUoWRfK6aYfQGYpWyRLBFE5t9DkJiMH5dV+dx6qkCAJhFFu+r2RMVJD gmkfjAw8I/2U+PPMApJ8RfH+lrVaz2fYkmEetgwWM0UNEJ5IPmMauZahPE ljlJoKyXTa25Z2KFEJVljd4jnFHr2iuyMgIql3Dt26jZkebgEytaWQTJ9Z W3NoPXqBd0+kYPyQc8NXj2gTwKwaEFgWAdIu3WPUM/utrtSHp12ePD6UgH H6siE9xXJUSCgZgZcAVAF2ZTd5y1fa07SvgM8tsV7JavDp62TLw+xpYQhr htWYpHkIGCaKQHZGKedYnRkjZB9/d0BYflpvLWnjtFanfj3g1RgnNBw2p8 zSl9PwLaQQNsVtGcg60D97TanZIzSD+yWPliZrrIAH8ncOExoGk8s85dWj pcvxyrKX52kbG5tk51niE/MgQxlRwse9BLFLVlc50BCHn1i27+TJuFHiO+ 16uXU1PyN88ZXAT2xgb2uIsxCb4CNBM0L6scwLRj+uLCHCghhdF6zoUvT1 8qtyZsvDu86e0x53ez8zCoX4K/6zYSZQOz+mkSa6DWqCIeeua0EQA/Cw1i gaCj5X7kKiytLpRT2C1rIb+NP1SEZTyuju+0v2H/kBJPjf6PJJXpByoTU6 gyZfbYLwJrLBAx8PqQ== your_email@domain.com Paste your key into the _ Key** field. Click Add SSH key . When prompted, confirm your GitHub password. Your SSH Key has now been added and is ready for use with GitHub","title":"Configuring GitHub to use SSH"},{"location":"ubuntu/","text":"Install the Ubuntu Linux distribution from Microsoft Store If you already have Ubuntu installed you can skip to Set your distribution version to WSL 2 . Open the Microsoft Store and search for Ubuntu 20.04. (CentOS is available, but it is not free AND is managed by a team in China, NOT the CentOS group). Ubuntu is managed by Canonical. Once chosen, click on get and install. If asked to enter your Microsoft ID, you can say 'No, thanks', Ubuntu will start downloading. Once downloaded, click Launch , a new window will open. Configuring Ubuntu when first used When first launched Ubuntu will start some configuration. Ubuntu is now running some initial startup programs to prepare the Ubuntu environment for use. When prompted, enter a username (it is recommended for simplicity that current user ID be used. in this example, 'pmclean' is used) Ubuntu is now configured and ready for use! Configuring package repositories To be able to maintain and allow for future enhancements, the Ubuntu installation needs to be configured for updates, and then brought up to date. The first step in preparing update, is to refresh the package repositories in the Ubuntu instance. To update the software repositories, at the command prompt sudo apt-get update Enter the sudo password . This will be the password that was entered for the account on first run, and will be used going forward to execute ALL sudo command. Ubuntu will now update the local repository cache with the latest build information Now, upgrade Ubuntu to use the latest version of all installed packages. sudo apt-get -y upgrade In this example, all packages were up to date, so no packages were updated Type exit and then enter/return to close the window. Set your distribution version to WSL 2 You can check the WSL version assigned to each of the Linux distributions you have installed by opening the PowerShell command line and entering the command (only available in Windows Build 19041 or higher): wsl -l -v If you are running the un-numbered version of Ubuntu you will see PS C:\\Users\\devops-pc\\> wsl -l -v NAME STATE VERSION Ubuntu Running 2 PS C:\\Users\\devops-pc\\> For Ubuntu 18.04 PS C:\\Users\\devops-pc\\> wsl -l -v NAME STATE VERSION Ubuntu-18.04 Running 2 PS C:\\Users\\devops-pc\\> For Ubuntu 20.04 PS C:\\Users\\devops-pc\\> wsl -l -v NAME STATE VERSION Ubuntu-20.04 Running 2 PS C:\\Users\\devops-pc\\> If your Version shows up as 1 , set the distribution to be backed by WSL2 , so please run: PS C:\\Users\\devops-pc\\> wsl --set-version Ubuntu 2 # If you have the Ubuntu un-numbered PS C:\\Users\\devops-pc\\> wsl --set-version Ubuntu-18.04 2 # If you have the Ubuntu 18.04 PS C:\\Users\\devops-pc\\> wsl --set-version Ubuntu-20.04 2 # If you have the Ubuntu 20.04 Conversion in progress, this may take a few minutes... For information on key differences with WSL 2 please visit https://aka.ms/wsl2 Conversion complete. PS C:\\Users\\devops-pc\\> wsl -l -v NAME STATE VERSION Ubuntu-20.04 Running 2 PS C:\\Users\\devops-pc\\>","title":"Install Ubuntu on Windows"},{"location":"ubuntu/#install-the-ubuntu-linux-distribution-from-microsoft-store","text":"If you already have Ubuntu installed you can skip to Set your distribution version to WSL 2 . Open the Microsoft Store and search for Ubuntu 20.04. (CentOS is available, but it is not free AND is managed by a team in China, NOT the CentOS group). Ubuntu is managed by Canonical. Once chosen, click on get and install. If asked to enter your Microsoft ID, you can say 'No, thanks', Ubuntu will start downloading. Once downloaded, click Launch , a new window will open.","title":"Install the Ubuntu Linux distribution from Microsoft Store"},{"location":"ubuntu/#configuring-ubuntu-when-first-used","text":"When first launched Ubuntu will start some configuration. Ubuntu is now running some initial startup programs to prepare the Ubuntu environment for use. When prompted, enter a username (it is recommended for simplicity that current user ID be used. in this example, 'pmclean' is used) Ubuntu is now configured and ready for use!","title":"Configuring Ubuntu when first used"},{"location":"ubuntu/#configuring-package-repositories","text":"To be able to maintain and allow for future enhancements, the Ubuntu installation needs to be configured for updates, and then brought up to date. The first step in preparing update, is to refresh the package repositories in the Ubuntu instance. To update the software repositories, at the command prompt sudo apt-get update Enter the sudo password . This will be the password that was entered for the account on first run, and will be used going forward to execute ALL sudo command. Ubuntu will now update the local repository cache with the latest build information Now, upgrade Ubuntu to use the latest version of all installed packages. sudo apt-get -y upgrade In this example, all packages were up to date, so no packages were updated Type exit and then enter/return to close the window.","title":"Configuring package repositories"},{"location":"ubuntu/#set-your-distribution-version-to-wsl-2","text":"You can check the WSL version assigned to each of the Linux distributions you have installed by opening the PowerShell command line and entering the command (only available in Windows Build 19041 or higher): wsl -l -v If you are running the un-numbered version of Ubuntu you will see PS C:\\Users\\devops-pc\\> wsl -l -v NAME STATE VERSION Ubuntu Running 2 PS C:\\Users\\devops-pc\\> For Ubuntu 18.04 PS C:\\Users\\devops-pc\\> wsl -l -v NAME STATE VERSION Ubuntu-18.04 Running 2 PS C:\\Users\\devops-pc\\> For Ubuntu 20.04 PS C:\\Users\\devops-pc\\> wsl -l -v NAME STATE VERSION Ubuntu-20.04 Running 2 PS C:\\Users\\devops-pc\\> If your Version shows up as 1 , set the distribution to be backed by WSL2 , so please run: PS C:\\Users\\devops-pc\\> wsl --set-version Ubuntu 2 # If you have the Ubuntu un-numbered PS C:\\Users\\devops-pc\\> wsl --set-version Ubuntu-18.04 2 # If you have the Ubuntu 18.04 PS C:\\Users\\devops-pc\\> wsl --set-version Ubuntu-20.04 2 # If you have the Ubuntu 20.04 Conversion in progress, this may take a few minutes... For information on key differences with WSL 2 please visit https://aka.ms/wsl2 Conversion complete. PS C:\\Users\\devops-pc\\> wsl -l -v NAME STATE VERSION Ubuntu-20.04 Running 2 PS C:\\Users\\devops-pc\\>","title":"Set your distribution version to WSL 2"},{"location":"using-the-new-repo/","text":"In this example, we are working with the seal example project. Opening the project in Visual Studio Code Open Visual Studio Code (VSC), click File -> Open, navigate to the folder containing the new project, in our case here, seal . Click Open . The project will load in VSC. Once loaded, click on the small green Icon on the bottom left hand corner of the editor. This will make the remote select dropdown appear. Chose Remote-Containers: Reopen in Container . The project will now open in a docker container. As this is the first time we are opening this container, it will take a while to open, as the required images need to be downloaded from teh docker image hub, to build the container. I suggest a coffee. The container will be fully loaded and ready to use when the icon in the bottom left switches from Opening Remote to Dev Container:seal as shown. We can now test that the container is up and running by opening a terminal within VSC. CTRL+backtick open the new terminal. The command prompt of the new terminal will read: vscode@seal:/app$ Testing SSH and GPG within your container To connect to GitHub from within Visual Studio Code, open the Integrated Terminal. At the command prompt type the following: vscode@seal:/app$ env | grep GPG GPG_TTY=/dev/pts/0 GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D vscode@seal:/app$ git pull Already up-to-date. vscode@seal:/app$ echo git | gpg --clearsign If all is well, you will receive an output simmilar to the above. and be propmeted for your GPG password. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Please enter the passphrase to unlock the OpenPGP secret key: \u2502 \u2502 \"Lab Developer <lab-dev@domain.com>\" \u2502 \u2502 2048-bit RSA key, ID <GPG KEY HERE>, \u2502 \u2502 created 2021-05-20. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Passphrase: _________________________________________________ \u2502 \u2502 \u2502 \u2502 <OK> <Cancel> \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Enter your password and GPG will clearsign. gpg: all values passed to '--default-key' ignored -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256 git -----BEGIN PGP SIGNATURE----- iQEzBAEBCAAdFiEEgAW66/BDmau3P7xdtPEphdY4DH4FAl36EIgACgkQtPEphdY4 DH6YNwf9FdCbTNxImoCFtsQLsZQd7ewLxorRmBmr0CDjp9tb4BrBDxPBr16tmONK q8B4v28rUuB489y0E0+dfRa1ZUa2P2dvNzfprW97L4BFzTgd78GTBxKr4L8FPEbt 4p8Aj53SXH5NT+IyFkTdS7Y/OErqZRcNQspRn2mGEyrBWJ0Gy6DPRCPYQolqiigb e21tCvGRS73+Ub/NOblJF4KkEmXtMwFt7M+MWC5OcNIuzy4Rxr/0vy7K6rrNGX7B /pDHFhQss9GocG9wpEnjV6se7pX06ENzJDUDMNMME4+cfiXokiyod+q4jv9v5Lpp lytT5WFdxSpl5DyIB1D9pP6RZsWtwQ== =9FfA -----END PGP SIGNATURE----- vscode@seal:/app$ Congratulations, the Container is now configured and ready to use for your application.","title":"Using the New Repository"},{"location":"using-the-new-repo/#opening-the-project-in-visual-studio-code","text":"Open Visual Studio Code (VSC), click File -> Open, navigate to the folder containing the new project, in our case here, seal . Click Open . The project will load in VSC. Once loaded, click on the small green Icon on the bottom left hand corner of the editor. This will make the remote select dropdown appear. Chose Remote-Containers: Reopen in Container . The project will now open in a docker container. As this is the first time we are opening this container, it will take a while to open, as the required images need to be downloaded from teh docker image hub, to build the container. I suggest a coffee. The container will be fully loaded and ready to use when the icon in the bottom left switches from Opening Remote to Dev Container:seal as shown. We can now test that the container is up and running by opening a terminal within VSC. CTRL+backtick open the new terminal. The command prompt of the new terminal will read: vscode@seal:/app$","title":"Opening the project in Visual Studio Code"},{"location":"using-the-new-repo/#testing-ssh-and-gpg-within-your-container","text":"To connect to GitHub from within Visual Studio Code, open the Integrated Terminal. At the command prompt type the following: vscode@seal:/app$ env | grep GPG GPG_TTY=/dev/pts/0 GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D vscode@seal:/app$ git pull Already up-to-date. vscode@seal:/app$ echo git | gpg --clearsign If all is well, you will receive an output simmilar to the above. and be propmeted for your GPG password. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Please enter the passphrase to unlock the OpenPGP secret key: \u2502 \u2502 \"Lab Developer <lab-dev@domain.com>\" \u2502 \u2502 2048-bit RSA key, ID <GPG KEY HERE>, \u2502 \u2502 created 2021-05-20. \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Passphrase: _________________________________________________ \u2502 \u2502 \u2502 \u2502 <OK> <Cancel> \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Enter your password and GPG will clearsign. gpg: all values passed to '--default-key' ignored -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256 git -----BEGIN PGP SIGNATURE----- iQEzBAEBCAAdFiEEgAW66/BDmau3P7xdtPEphdY4DH4FAl36EIgACgkQtPEphdY4 DH6YNwf9FdCbTNxImoCFtsQLsZQd7ewLxorRmBmr0CDjp9tb4BrBDxPBr16tmONK q8B4v28rUuB489y0E0+dfRa1ZUa2P2dvNzfprW97L4BFzTgd78GTBxKr4L8FPEbt 4p8Aj53SXH5NT+IyFkTdS7Y/OErqZRcNQspRn2mGEyrBWJ0Gy6DPRCPYQolqiigb e21tCvGRS73+Ub/NOblJF4KkEmXtMwFt7M+MWC5OcNIuzy4Rxr/0vy7K6rrNGX7B /pDHFhQss9GocG9wpEnjV6se7pX06ENzJDUDMNMME4+cfiXokiyod+q4jv9v5Lpp lytT5WFdxSpl5DyIB1D9pP6RZsWtwQ== =9FfA -----END PGP SIGNATURE----- vscode@seal:/app$ Congratulations, the Container is now configured and ready to use for your application.","title":"Testing SSH and GPG within your container"},{"location":"using-the-template/","text":"You can create a new repository on your personal account or in the organization from this template. In this example, we are goin to create a new repository from the new template. Whilst you can choose to make the repository either public or private, public repositories are visible to the public, while private repositories are only accessible to you, and people you share them with; I make any work related repositories private. In the upper-right corner of any page, use the + drop-down menu, and select New repository . Use the Choose a template drop-down and select the psmware-labs/python-psql-vscode template repository. Select, domain as the owner, and name the repository, in this example we are using seal as the repo name. We have added a brief description and then chose Private , if it is not already marks as such. Click on Create Repository The repository will start generating. The repository has been created. And as can be seen, has been created from the template.","title":"A New repository from the Template"},{"location":"vscode/","text":"Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). It also integrates seamlessly with Docker to allow for developing inside Docker containers. \"So what, Pat?\" I hear you say? Well, how about having your entire development environment and source all stored as code. This gives a consistent development environment for an entire team. All developers use the same OS for development, the same system libraries, and the same language runtime, no matter what host OS they are using. Installation Download the System Installer for windows from the Visual Studio Code Download page Accept the licence agreement, and click Next until you get to the Select Additional Task window. Ensure that the bottom 4 check boxes are ticked , then click Next . Installation will start, and complete. Launch Visual Studio Code. Installing the Docker Development Extensions With Visual Studio Code open, click on the '4-cube' icon to open the extensions sidebar. Type remote into the search box at the top, then click Remote - Container . Ensure that the extension is the 'Remote-Containers' Extension as owned by Microsoft, seen from the screenshot. Click the Green Install Button. Type docker into the search box at the top, then click Docker . Ensure that the extension is the 'Docker' Extension as owned by Microsoft, seen from the screenshot. Click the Green Install Button. Visual Studio Code is now configured, and can now be closed.","title":"Visual Studio Code"},{"location":"vscode/#installation","text":"Download the System Installer for windows from the Visual Studio Code Download page Accept the licence agreement, and click Next until you get to the Select Additional Task window. Ensure that the bottom 4 check boxes are ticked , then click Next . Installation will start, and complete. Launch Visual Studio Code.","title":"Installation"},{"location":"vscode/#installing-the-docker-development-extensions","text":"With Visual Studio Code open, click on the '4-cube' icon to open the extensions sidebar. Type remote into the search box at the top, then click Remote - Container . Ensure that the extension is the 'Remote-Containers' Extension as owned by Microsoft, seen from the screenshot. Click the Green Install Button. Type docker into the search box at the top, then click Docker . Ensure that the extension is the 'Docker' Extension as owned by Microsoft, seen from the screenshot. Click the Green Install Button. Visual Studio Code is now configured, and can now be closed.","title":"Installing the Docker Development Extensions"}]}